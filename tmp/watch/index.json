[{"uri":"http://localhost:8901/reference/sigmagraph-net.html","title":"SigmaGraph.NET","content":"Defaults \nGlobals \nInternalUtils \nRender \nStyleParam \nCircularOptions \nCssLength \nDisplayData \nDisplayOptions \nEdge \nFA2Options \nFA2Settings \nGraphData \nHTML \nJSlibReference \nLayout \nNode \nNoverlapOptions \nNoverlapSettings \nPlainJsonString \nPlainJsonStringConverter \nRandomOptions \nRotationOptions \nSigmaGraph \nVisGraph \nVisGraphElement","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-interactive.html","title":"SigmaGraph.NET.Interactive","content":"Formatters \nFormatterKernelExtension","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-defaults.html","title":"Defaults","content":"Defaults \n Contains mutable global default values.\n Changing these values will apply the default values to all consecutive Graph generations. \nDefaults.DefaultWidth \nDefaultWidth \nDefaults.DefaultHeight \nDefaultHeight \nDefaults.DefaultDisplayOptions \nDefaultDisplayOptions \nDefaults.reset \nreset","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-defaults.html#DefaultWidth","title":"Defaults.DefaultWidth","content":"Defaults.DefaultWidth \nDefaultWidth \n The default width of the graph container in generated HTML files. Default: 100%.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-defaults.html#DefaultHeight","title":"Defaults.DefaultHeight","content":"Defaults.DefaultHeight \nDefaultHeight \n The default height of the graph container in generated HTML files. Default: 900 pixels.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-defaults.html#DefaultDisplayOptions","title":"Defaults.DefaultDisplayOptions","content":"Defaults.DefaultDisplayOptions \nDefaultDisplayOptions \n The default display options for the graph.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-defaults.html#reset","title":"Defaults.reset","content":"Defaults.reset \nreset \n Resets global defaults to the initial values.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-globals.html","title":"Globals","content":"Globals \n \nGlobals.NUGET_VERSION \nNUGET_VERSION \nGlobals.GRAPHOLOGY_LIB_VERSION \nGRAPHOLOGY_LIB_VERSION \nGlobals.SIGMAJS_VERSION \nSIGMAJS_VERSION \nGlobals.GRAPHOLOGY_VERSION \nGRAPHOLOGY_VERSION \nGlobals.SCRIPT_TEMPLATE \nSCRIPT_TEMPLATE \nGlobals.REQUIREJS_SCRIPT_TEMPLATE \nREQUIREJS_SCRIPT_TEMPLATE","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-globals.html#NUGET_VERSION","title":"Globals.NUGET_VERSION","content":"Globals.NUGET_VERSION \nNUGET_VERSION \n The NuGet package version for SigmaGraph.NET.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-globals.html#GRAPHOLOGY_LIB_VERSION","title":"Globals.GRAPHOLOGY_LIB_VERSION","content":"Globals.GRAPHOLOGY_LIB_VERSION \nGRAPHOLOGY_LIB_VERSION \n The version of the Graphology library used in the project.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-globals.html#SIGMAJS_VERSION","title":"Globals.SIGMAJS_VERSION","content":"Globals.SIGMAJS_VERSION \nSIGMAJS_VERSION \n The sigma.js version loaded from the CDN in rendered HTML docs.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-globals.html#GRAPHOLOGY_VERSION","title":"Globals.GRAPHOLOGY_VERSION","content":"Globals.GRAPHOLOGY_VERSION \nGRAPHOLOGY_VERSION \n The graphology.js version loaded from the CDN in rendered HTML docs.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-globals.html#SCRIPT_TEMPLATE","title":"Globals.SCRIPT_TEMPLATE","content":"Globals.SCRIPT_TEMPLATE \nSCRIPT_TEMPLATE \n JavaScript template for rendering the graph. \n It includes placeholders for container ID, graph data, layout, settings, and widgets.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-globals.html#REQUIREJS_SCRIPT_TEMPLATE","title":"Globals.REQUIREJS_SCRIPT_TEMPLATE","content":"Globals.REQUIREJS_SCRIPT_TEMPLATE \nREQUIREJS_SCRIPT_TEMPLATE \n JavaScript template for rendering the graph using RequireJS. \n It includes placeholders for JavaScript file URLs, container ID, graph data, layout, settings, and widgets.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-internalutils.html","title":"InternalUtils","content":"InternalUtils \n Internal utility functions and types for handling JavaScript references. \nInternalUtils.JSRefGroup \nJSRefGroup \nInternalUtils.readFromManifestResource \nreadFromManifestResource \nInternalUtils.getSourceCodeJS \ngetSourceCodeJS \nInternalUtils.getUriJS \ngetUriJS \nInternalUtils.getNugetPathJS \ngetNugetPathJS","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-internalutils.html#readFromManifestResource","title":"InternalUtils.readFromManifestResource","content":"InternalUtils.readFromManifestResource \nreadFromManifestResource \n\n Reads the content of an embedded resource from the assembly.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-internalutils.html#getSourceCodeJS","title":"InternalUtils.getSourceCodeJS","content":"InternalUtils.getSourceCodeJS \ngetSourceCodeJS \n\n Retrieves the source code for JavaScript libraries from embedded resources.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-internalutils.html#getUriJS","title":"InternalUtils.getUriJS","content":"InternalUtils.getUriJS \ngetUriJS \n\n Returns the URLs for JavaScript libraries from a CDN, using versions specified in Globals.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-internalutils.html#getNugetPathJS","title":"InternalUtils.getNugetPathJS","content":"InternalUtils.getNugetPathJS \ngetNugetPathJS \n\n Returns the paths for JavaScript libraries based on NuGet package location in the user\u0027s profile directory.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-internalutils-jsrefgroup.html","title":"JSRefGroup","content":"JSRefGroup \n Defines a record type to hold paths or URLs for JavaScript libraries. \nJSRefGroup.Sigma \nSigma \nJSRefGroup.Graphology \nGraphology \nJSRefGroup.GraphologyLib \nGraphologyLib","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-internalutils-jsrefgroup.html#Sigma","title":"JSRefGroup.Sigma","content":"JSRefGroup.Sigma \nSigma \nURL or path to the Sigma.js library.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-internalutils-jsrefgroup.html#Graphology","title":"JSRefGroup.Graphology","content":"JSRefGroup.Graphology \nGraphology \nURL or path to the Graphology library.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-internalutils-jsrefgroup.html#GraphologyLib","title":"JSRefGroup.GraphologyLib","content":"JSRefGroup.GraphologyLib \nGraphologyLib \nURL or path to the Graphology library (additional version).","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-render.html","title":"Render","content":"Render \nModule for rendering-related types and methods \nRender.ColorOrReference \nColorOrReference \nRender.Settings \nSettings","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-render-colororreference.html","title":"ColorOrReference","content":"ColorOrReference \nA type representing either a color or a reference to a color \nColorOrReference.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nColorOrReference.Init \nInit \nColorOrReference.Style \nStyle","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-render-colororreference.html#\u0060\u0060.ctor\u0060\u0060","title":"ColorOrReference.\u0060\u0060.ctor\u0060\u0060","content":"ColorOrReference.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-render-colororreference.html#Init","title":"ColorOrReference.Init","content":"ColorOrReference.Init \nInit \nInitializes a new instance of ColorOrReference with optional color and reference","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-render-colororreference.html#Style","title":"ColorOrReference.Style","content":"ColorOrReference.Style \nStyle \nApplies the provided color and reference to the ColorOrReference object","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-render-settings.html","title":"Settings","content":"Settings \nA type representing various settings for rendering \nSettings.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nSettings.Init \nInit \nSettings.Style \nStyle","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-render-settings.html#\u0060\u0060.ctor\u0060\u0060","title":"Settings.\u0060\u0060.ctor\u0060\u0060","content":"Settings.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-render-settings.html#Init","title":"Settings.Init","content":"Settings.Init \nInit \nInitializes a new instance of Settings with optional rendering settings","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-render-settings.html#Style","title":"Settings.Style","content":"Settings.Style \nStyle \nApplies the provided styling options to the Settings object","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-styleparam.html","title":"StyleParam","content":"StyleParam \n \nStyleParam.EdgeType \nEdgeType \nStyleParam.NodeType \nNodeType","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-styleparam-edgetype.html","title":"EdgeType","content":"EdgeType \nDefines different types of edge styles for graph visualization. \nEdgeType.toString \ntoString \nEdgeType.Line \nLine \nEdgeType.Arrow \nArrow \nEdgeType.Custom \nCustom","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-styleparam-edgetype.html#toString","title":"EdgeType.toString","content":"EdgeType.toString \ntoString \nConverts the edge type to a corresponding string representation.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-styleparam-edgetype.html#Line","title":"EdgeType.Line","content":"EdgeType.Line \nLine \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-styleparam-edgetype.html#Arrow","title":"EdgeType.Arrow","content":"EdgeType.Arrow \nArrow \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-styleparam-edgetype.html#Custom","title":"EdgeType.Custom","content":"EdgeType.Custom \nCustom \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-styleparam-nodetype.html","title":"NodeType","content":"NodeType \nDefines different types of node shapes for graph visualization. \nNodeType.toString \ntoString \nNodeType.Circle \nCircle \nNodeType.Custom \nCustom","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-styleparam-nodetype.html#toString","title":"NodeType.toString","content":"NodeType.toString \ntoString \nConverts the node type to a corresponding string representation.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-styleparam-nodetype.html#Circle","title":"NodeType.Circle","content":"NodeType.Circle \nCircle \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-styleparam-nodetype.html#Custom","title":"NodeType.Custom","content":"NodeType.Custom \nCustom \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-circularoptions.html","title":"CircularOptions","content":"CircularOptions \n CircularOptions type for configuring the Circular layout options \nCircularOptions.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCircularOptions.Init \nInit \nCircularOptions.Style \nStyle","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-circularoptions.html#\u0060\u0060.ctor\u0060\u0060","title":"CircularOptions.\u0060\u0060.ctor\u0060\u0060","content":"CircularOptions.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-circularoptions.html#Init","title":"CircularOptions.Init","content":"CircularOptions.Init \nInit \n\n Initializes a new instance of CircularOptions with optional parameters.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-circularoptions.html#Style","title":"CircularOptions.Style","content":"CircularOptions.Style \nStyle \n    \n Applies updates to the CircularOptions instance based on the optional parameters.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-csslength.html","title":"CssLength","content":"CssLength \n Represents CSS length units, either in pixels (PX) or percentage (Percent) \nCssLength.serialize \nserialize \nCssLength.PX \nPX \nCssLength.Percent \nPercent","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-csslength.html#serialize","title":"CssLength.serialize","content":"CssLength.serialize \nserialize \nSerializes a CssLength value to its string representation.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-csslength.html#PX","title":"CssLength.PX","content":"CssLength.PX \nPX \nRepresents a length in pixels.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-csslength.html#Percent","title":"CssLength.Percent","content":"CssLength.Percent \nPercent \nRepresents a length as a percentage of the containing element.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displaydata.html","title":"DisplayData","content":"DisplayData \n Represents data for display elements such as nodes and edges. \nDisplayData.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nDisplayData.Init \nInit \nDisplayData.Style \nStyle","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displaydata.html#\u0060\u0060.ctor\u0060\u0060","title":"DisplayData.\u0060\u0060.ctor\u0060\u0060","content":"DisplayData.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displaydata.html#Init","title":"DisplayData.Init","content":"DisplayData.Init \nInit \n\n Initializes a new instance of DisplayData with optional parameters.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displaydata.html#Style","title":"DisplayData.Style","content":"DisplayData.Style \nStyle \n\n Applies style updates to a DisplayData object.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displayoptions.html","title":"DisplayOptions","content":"DisplayOptions \n I am displayotion. \nDisplayOptions.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nDisplayOptions.addAdditionalHeadTags \naddAdditionalHeadTags \nDisplayOptions.addDescription \naddDescription \nDisplayOptions.getAdditionalHeadTags \ngetAdditionalHeadTags \nDisplayOptions.getDescription \ngetDescription \nDisplayOptions.getSigmaReference \ngetSigmaReference \nDisplayOptions.init \ninit \nDisplayOptions.initCDNOnly \ninitCDNOnly \nDisplayOptions.initDefault \ninitDefault \nDisplayOptions.setAdditionalHeadTags \nsetAdditionalHeadTags \nDisplayOptions.setDescription \nsetDescription \nDisplayOptions.setSigmaReference \nsetSigmaReference \nDisplayOptions.style \nstyle \nDisplayOptions.tryGetAdditionalHeadTags \ntryGetAdditionalHeadTags \nDisplayOptions.tryGetDescription \ntryGetDescription \nDisplayOptions.tryGetSigmaReference \ntryGetSigmaReference","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displayoptions.html#\u0060\u0060.ctor\u0060\u0060","title":"DisplayOptions.\u0060\u0060.ctor\u0060\u0060","content":"DisplayOptions.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displayoptions.html#addAdditionalHeadTags","title":"DisplayOptions.addAdditionalHeadTags","content":"DisplayOptions.addAdditionalHeadTags \naddAdditionalHeadTags \n\n Adds additional head tags to the display options.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displayoptions.html#addDescription","title":"DisplayOptions.addDescription","content":"DisplayOptions.addDescription \naddDescription \n\n Adds a description to the display options.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displayoptions.html#getAdditionalHeadTags","title":"DisplayOptions.getAdditionalHeadTags","content":"DisplayOptions.getAdditionalHeadTags \ngetAdditionalHeadTags \n\n Gets the additional head tags from the display options.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displayoptions.html#getDescription","title":"DisplayOptions.getDescription","content":"DisplayOptions.getDescription \ngetDescription \n\n Gets the description from the display options.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displayoptions.html#getSigmaReference","title":"DisplayOptions.getSigmaReference","content":"DisplayOptions.getSigmaReference \ngetSigmaReference \n\n Gets the Sigma.js reference from the display options.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displayoptions.html#init","title":"DisplayOptions.init","content":"DisplayOptions.init \ninit \n\n Returns a new DisplayOptions object with the given styles\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displayoptions.html#initCDNOnly","title":"DisplayOptions.initCDNOnly","content":"DisplayOptions.initCDNOnly \ninitCDNOnly \n Returns a DisplayOptions Object with the cdn set to Globals.SIGMAJS_VERSION and Globals.GRAPHOLOGY_VERSION","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displayoptions.html#initDefault","title":"DisplayOptions.initDefault","content":"DisplayOptions.initDefault \ninitDefault \n Returns a DisplayOptions Object with the cdn set to Globals.SIGMAJS_VERSION and additional head tags ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displayoptions.html#setAdditionalHeadTags","title":"DisplayOptions.setAdditionalHeadTags","content":"DisplayOptions.setAdditionalHeadTags \nsetAdditionalHeadTags \n\n Sets additional head tags for the display options.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displayoptions.html#setDescription","title":"DisplayOptions.setDescription","content":"DisplayOptions.setDescription \nsetDescription \n\n Sets a description for the display options.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displayoptions.html#setSigmaReference","title":"DisplayOptions.setSigmaReference","content":"DisplayOptions.setSigmaReference \nsetSigmaReference \n\n Sets the Sigma.js reference for the display options.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displayoptions.html#style","title":"DisplayOptions.style","content":"DisplayOptions.style \nstyle \n\n Returns a function sthat applies the given styles to a DisplayOptions object\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displayoptions.html#tryGetAdditionalHeadTags","title":"DisplayOptions.tryGetAdditionalHeadTags","content":"DisplayOptions.tryGetAdditionalHeadTags \ntryGetAdditionalHeadTags \n\n Tries to get the additional head tags from the display options.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displayoptions.html#tryGetDescription","title":"DisplayOptions.tryGetDescription","content":"DisplayOptions.tryGetDescription \ntryGetDescription \n\n Tries to get the description from the display options.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-displayoptions.html#tryGetSigmaReference","title":"DisplayOptions.tryGetSigmaReference","content":"DisplayOptions.tryGetSigmaReference \ntryGetSigmaReference \n\n Tries to get the Sigma.js reference from the display options.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-edge.html","title":"Edge","content":"Edge \n Represents an edge in the graph with source and target nodes. \nEdge.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nEdge.Init \nInit \nEdge.Style \nStyle","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-edge.html#\u0060\u0060.ctor\u0060\u0060","title":"Edge.\u0060\u0060.ctor\u0060\u0060","content":"Edge.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-edge.html#Init","title":"Edge.Init","content":"Edge.Init \nInit \n\n Initializes a new instance of Edge with mandatory source and target parameters.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-edge.html#Style","title":"Edge.Style","content":"Edge.Style \nStyle \n\n Applies style updates to an Edge object.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-fa2options.html","title":"FA2Options","content":"FA2Options \n FA2Options type for configuring the Force Atlas 2 layout options. \nFA2Options.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nFA2Options.Init \nInit \nFA2Options.Style \nStyle","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-fa2options.html#\u0060\u0060.ctor\u0060\u0060","title":"FA2Options.\u0060\u0060.ctor\u0060\u0060","content":"FA2Options.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-fa2options.html#Init","title":"FA2Options.Init","content":"FA2Options.Init \nInit \n\n Initializes a new instance of FA2Options with optional parameters.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-fa2options.html#Style","title":"FA2Options.Style","content":"FA2Options.Style \nStyle \n\n Applies updates to the FA2Options instance based on the optional parameters.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-fa2settings.html","title":"FA2Settings","content":"FA2Settings \n FA2Settings type for configuring the Force Atlas 2 algorithm settings. \nFA2Settings.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nFA2Settings.Init \nInit \nFA2Settings.Style \nStyle","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-fa2settings.html#\u0060\u0060.ctor\u0060\u0060","title":"FA2Settings.\u0060\u0060.ctor\u0060\u0060","content":"FA2Settings.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-fa2settings.html#Init","title":"FA2Settings.Init","content":"FA2Settings.Init \nInit \n\n Initializes a new instance of FA2Settings with optional parameters.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-fa2settings.html#Style","title":"FA2Settings.Style","content":"FA2Settings.Style \nStyle \n\n Applies updates to the FA2Settings instance based on the optional parameters.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-graphdata.html","title":"GraphData","content":"GraphData \n\n Represents the data structure for a graph, including nodes and edges.\n  \n\n The GraphData type is used to manage and manipulate the graph\u0027s nodes and edges. \n Nodes and edges are stored in internal \u0060ResizeArray\u0060 collections for efficient access and modification.\n  \nGraphData.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nGraphData.addEdge \naddEdge \nGraphData.addNode \naddNode \nGraphData.Nodes \nNodes \nGraphData.Edges \nEdges","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-graphdata.html#\u0060\u0060.ctor\u0060\u0060","title":"GraphData.\u0060\u0060.ctor\u0060\u0060","content":"GraphData.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-graphdata.html#addEdge","title":"GraphData.addEdge","content":"GraphData.addEdge \naddEdge \n\n Adds an edge to the graph.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-graphdata.html#addNode","title":"GraphData.addNode","content":"GraphData.addNode \naddNode \n\n Adds a node to the graph.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-graphdata.html#Nodes","title":"GraphData.Nodes","content":"GraphData.Nodes \nNodes \n Internal storage for nodes.\n A collection of nodes in the graph.\n Nodes are stored in a \u0060ResizeArray\u0060 to allow dynamic resizing and efficient access.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-graphdata.html#Edges","title":"GraphData.Edges","content":"GraphData.Edges \nEdges \n Internal storage for edges.\n A collection of edges in the graph.\n Edges are stored in a \u0060ResizeArray\u0060 to allow dynamic resizing and efficient access.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-html.html","title":"HTML","content":"HTML \n Provides methods to generate HTML content for visualizing graphs with Sigma. \nHTML.CreateGraphHTML \nCreateGraphHTML \nHTML.CreateGraphScript \nCreateGraphScript \nHTML.Doc \nDoc \nHTML.show \nshow \nHTML.toEmbeddedHTML \ntoEmbeddedHTML \nHTML.toGraphHTML \ntoGraphHTML \nHTML.toGraphHTMLNodes \ntoGraphHTMLNodes","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-html.html#CreateGraphHTML","title":"HTML.CreateGraphHTML","content":"HTML.CreateGraphHTML \nCreateGraphHTML \n\n Creates HTML content for a graph with Sigma.js embedded in a specified container.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-html.html#CreateGraphScript","title":"HTML.CreateGraphScript","content":"HTML.CreateGraphScript \nCreateGraphScript \n\n Creates a script to render a graph with Sigma.js.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-html.html#Doc","title":"HTML.Doc","content":"HTML.Doc \nDoc \n\n Generates a complete HTML document including the graph and Sigma.js references.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-html.html#show","title":"HTML.show","content":"HTML.show \nshow \n\n Shows a SigmaGraph in the default web browser by creating an HTML file and opening it.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-html.html#toEmbeddedHTML","title":"HTML.toEmbeddedHTML","content":"HTML.toEmbeddedHTML \ntoEmbeddedHTML \n\n Converts a SigmaGraph to its HTML representation and embeds it into a full HTML page.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-html.html#toGraphHTML","title":"HTML.toGraphHTML","content":"HTML.toGraphHTML \ntoGraphHTML \n\n Converts a SigmaGraph to its HTML representation as a string.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-html.html#toGraphHTMLNodes","title":"HTML.toGraphHTMLNodes","content":"HTML.toGraphHTMLNodes \ntoGraphHTMLNodes \n\n Converts a CyGraph to its HTML representation, with optional display options.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-jslibreference.html","title":"JSlibReference","content":"JSlibReference \n Represents how the JavaScript library is included in the HTML document\u0027s head section. \nJSlibReference.Local \nLocal \nJSlibReference.CDN \nCDN \nJSlibReference.Full \nFull \nJSlibReference.Require \nRequire \nJSlibReference.NoReference \nNoReference","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-jslibreference.html#Local","title":"JSlibReference.Local","content":"JSlibReference.Local \nLocal \n\n A local reference to the JavaScript library.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-jslibreference.html#CDN","title":"JSlibReference.CDN","content":"JSlibReference.CDN \nCDN \n\n The URL for a script tag that references the JavaScript library CDN.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-jslibreference.html#Full","title":"JSlibReference.Full","content":"JSlibReference.Full \nFull \n\n The full JavaScript library source code (~100KB) is included in the output. \n HTML files generated with this option are fully self-contained and can be used offline.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-jslibreference.html#Require","title":"JSlibReference.Require","content":"JSlibReference.Require \nRequire \n\n Uses RequireJS to reference the JavaScript library from a URL.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-jslibreference.html#NoReference","title":"JSlibReference.NoReference","content":"JSlibReference.NoReference \nNoReference \n Includes no JavaScript library script at all. \n This can be helpful when embedding the output into a document that already references the JavaScript library.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-layout.html","title":"Layout","content":"Layout \n Layout defines different layout algorithms for a graph and serializes them into JavaScript commands. \nLayout.serialize \nserialize \nLayout.FA2 \nFA2 \nLayout.Noverlap \nNoverlap \nLayout.Circular \nCircular \nLayout.Random \nRandom \nLayout.Rotation \nRotation","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-layout.html#serialize","title":"Layout.serialize","content":"Layout.serialize \nserialize \n\n Serializes the selected layout into a JavaScript command string.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-layout.html#FA2","title":"Layout.FA2","content":"Layout.FA2 \nFA2 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-layout.html#Noverlap","title":"Layout.Noverlap","content":"Layout.Noverlap \nNoverlap \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-layout.html#Circular","title":"Layout.Circular","content":"Layout.Circular \nCircular \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-layout.html#Random","title":"Layout.Random","content":"Layout.Random \nRandom \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-layout.html#Rotation","title":"Layout.Rotation","content":"Layout.Rotation \nRotation \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-node.html","title":"Node","content":"Node \n Represents a node in the graph. \nNode.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nNode.Init \nInit \nNode.Style \nStyle","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-node.html#\u0060\u0060.ctor\u0060\u0060","title":"Node.\u0060\u0060.ctor\u0060\u0060","content":"Node.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-node.html#Init","title":"Node.Init","content":"Node.Init \nInit \n\n Initializes a new instance of Node with a mandatory key parameter.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-node.html#Style","title":"Node.Style","content":"Node.Style \nStyle \n\n Applies style updates to a Node object.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-noverlapoptions.html","title":"NoverlapOptions","content":"NoverlapOptions \n NoverlapOptions type for configuring the Noverlap layout options. \nNoverlapOptions.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nNoverlapOptions.Init \nInit \nNoverlapOptions.Style \nStyle","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-noverlapoptions.html#\u0060\u0060.ctor\u0060\u0060","title":"NoverlapOptions.\u0060\u0060.ctor\u0060\u0060","content":"NoverlapOptions.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-noverlapoptions.html#Init","title":"NoverlapOptions.Init","content":"NoverlapOptions.Init \nInit \n\n Initializes a new instance of NoverlapOptions with optional parameters.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-noverlapoptions.html#Style","title":"NoverlapOptions.Style","content":"NoverlapOptions.Style \nStyle \n  \n Applies updates to the NoverlapOptions instance based on the optional parameters.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-noverlapsettings.html","title":"NoverlapSettings","content":"NoverlapSettings \n NoverlapSettings type for configuring the Noverlap algorithm settings. \nNoverlapSettings.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nNoverlapSettings.Init \nInit \nNoverlapSettings.Style \nStyle","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-noverlapsettings.html#\u0060\u0060.ctor\u0060\u0060","title":"NoverlapSettings.\u0060\u0060.ctor\u0060\u0060","content":"NoverlapSettings.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-noverlapsettings.html#Init","title":"NoverlapSettings.Init","content":"NoverlapSettings.Init \nInit \n\n Initializes a new instance of NoverlapSettings with optional parameters.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-noverlapsettings.html#Style","title":"NoverlapSettings.Style","content":"NoverlapSettings.Style \nStyle \n\n Applies updates to the NoverlapSettings instance based on the optional parameters.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-plainjsonstring.html","title":"PlainJsonString","content":"PlainJsonString \n\n Represents a plain JSON string value.\n  \nPlainJsonString.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nPlainJsonString.Value \nValue","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-plainjsonstring.html#\u0060\u0060.ctor\u0060\u0060","title":"PlainJsonString.\u0060\u0060.ctor\u0060\u0060","content":"PlainJsonString.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-plainjsonstring.html#Value","title":"PlainJsonString.Value","content":"PlainJsonString.Value \nValue \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-plainjsonstringconverter.html","title":"PlainJsonStringConverter","content":"PlainJsonStringConverter \n\n JSON converter for serializing and deserializing \u003Ca href=\u0022http://localhost:8901/reference/sigmagraph-net-plainjsonstring.html\u0022\u003EPlainJsonString\u003C/a\u003E instances.\n  \nPlainJsonStringConverter.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-plainjsonstringconverter.html#\u0060\u0060.ctor\u0060\u0060","title":"PlainJsonStringConverter.\u0060\u0060.ctor\u0060\u0060","content":"PlainJsonStringConverter.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-randomoptions.html","title":"RandomOptions","content":"RandomOptions \n RandomOptions type for configuring the Random layout options \nRandomOptions.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nRandomOptions.Init \nInit \nRandomOptions.Style \nStyle","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-randomoptions.html#\u0060\u0060.ctor\u0060\u0060","title":"RandomOptions.\u0060\u0060.ctor\u0060\u0060","content":"RandomOptions.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-randomoptions.html#Init","title":"RandomOptions.Init","content":"RandomOptions.Init \nInit \n\n Initializes a new instance of RandomOptions with optional parameters.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-randomoptions.html#Style","title":"RandomOptions.Style","content":"RandomOptions.Style \nStyle \n    \n Applies updates to the RandomOptions instance based on the optional parameters.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-rotationoptions.html","title":"RotationOptions","content":"RotationOptions \n RotationOptions contains options for configuring a Rotation layout algorithm. \nRotationOptions.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nRotationOptions.Init \nInit \nRotationOptions.Style \nStyle","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-rotationoptions.html#\u0060\u0060.ctor\u0060\u0060","title":"RotationOptions.\u0060\u0060.ctor\u0060\u0060","content":"RotationOptions.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-rotationoptions.html#Init","title":"RotationOptions.Init","content":"RotationOptions.Init \nInit \n\n Initializes a new instance of RotationOptions with optional parameters.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-rotationoptions.html#Style","title":"RotationOptions.Style","content":"RotationOptions.Style \nStyle \n\n Applies updates to the RotationOptions instance based on the optional parameters.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-sigmagraph.html","title":"SigmaGraph","content":"SigmaGraph \nRepresents a graph within the SigmaGraph.NET framework. \nSigmaGraph.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nSigmaGraph.AddEdge \nAddEdge \nSigmaGraph.AddNode \nAddNode \nSigmaGraph.GetWidgetsAsString \nGetWidgetsAsString \nSigmaGraph.Width \nWidth \nSigmaGraph.GraphData \nGraphData \nSigmaGraph.Settings \nSettings \nSigmaGraph.Widgets \nWidgets \nSigmaGraph.Height \nHeight \nSigmaGraph.Layout \nLayout","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-sigmagraph.html#\u0060\u0060.ctor\u0060\u0060","title":"SigmaGraph.\u0060\u0060.ctor\u0060\u0060","content":"SigmaGraph.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-sigmagraph.html#AddEdge","title":"SigmaGraph.AddEdge","content":"SigmaGraph.AddEdge \nAddEdge \nAdds an edge to the graph.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-sigmagraph.html#AddNode","title":"SigmaGraph.AddNode","content":"SigmaGraph.AddNode \nAddNode \nAdds a node to the graph.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-sigmagraph.html#GetWidgetsAsString","title":"SigmaGraph.GetWidgetsAsString","content":"SigmaGraph.GetWidgetsAsString \nGetWidgetsAsString \nReturns a string representation of the widgets in the graph.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-sigmagraph.html#Width","title":"SigmaGraph.Width","content":"SigmaGraph.Width \nWidth \nGets or sets the width of the graph visualization.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-sigmagraph.html#GraphData","title":"SigmaGraph.GraphData","content":"SigmaGraph.GraphData \nGraphData \nGets or sets the graph data for this SigmaGraph instance.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-sigmagraph.html#Settings","title":"SigmaGraph.Settings","content":"SigmaGraph.Settings \nSettings \nGets or sets the rendering settings for this SigmaGraph instance.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-sigmagraph.html#Widgets","title":"SigmaGraph.Widgets","content":"SigmaGraph.Widgets \nWidgets \nGets or sets the collection of widgets associated with this SigmaGraph instance.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-sigmagraph.html#Height","title":"SigmaGraph.Height","content":"SigmaGraph.Height \nHeight \nGets or sets the height of the graph visualization.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-sigmagraph.html#Layout","title":"SigmaGraph.Layout","content":"SigmaGraph.Layout \nLayout \nGets or sets the layout configuration for this SigmaGraph instance.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraph.html","title":"VisGraph","content":"VisGraph \n Module to manipulate and style a graph \nVisGraph.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nVisGraph.empty \nempty \nVisGraph.show \nshow \nVisGraph.withCircularLayout \nwithCircularLayout \nVisGraph.withEdge \nwithEdge \nVisGraph.withEdges \nwithEdges \nVisGraph.withForceAtlas2 \nwithForceAtlas2 \nVisGraph.withHoverSelector \nwithHoverSelector \nVisGraph.withNode \nwithNode \nVisGraph.withNodes \nwithNodes \nVisGraph.withNoverlap \nwithNoverlap \nVisGraph.withRandomLayout \nwithRandomLayout \nVisGraph.withRenderer \nwithRenderer \nVisGraph.withSize \nwithSize","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraph.html#\u0060\u0060.ctor\u0060\u0060","title":"VisGraph.\u0060\u0060.ctor\u0060\u0060","content":"VisGraph.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraph.html#empty","title":"VisGraph.empty","content":"VisGraph.empty \nempty \n\n Creates an empty SigmaGraph instance\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraph.html#show","title":"VisGraph.show","content":"VisGraph.show \nshow \n\n Shows the SigmaGraph as an HTML document.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraph.html#withCircularLayout","title":"VisGraph.withCircularLayout","content":"VisGraph.withCircularLayout \nwithCircularLayout \n\n Assigns a circular layout to a SigmaGraph.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraph.html#withEdge","title":"VisGraph.withEdge","content":"VisGraph.withEdge \nwithEdge \n\n Adds a single edge to a SigmaGraph.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraph.html#withEdges","title":"VisGraph.withEdges","content":"VisGraph.withEdges \nwithEdges \n\n Adds a sequence of edges to a SigmaGraph.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraph.html#withForceAtlas2","title":"VisGraph.withForceAtlas2","content":"VisGraph.withForceAtlas2 \nwithForceAtlas2 \n\n Assigns a ForceAtlas2 layout to a SigmaGraph.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraph.html#withHoverSelector","title":"VisGraph.withHoverSelector","content":"VisGraph.withHoverSelector \nwithHoverSelector \n\n Adds a hover selector widget to the SigmaGraph.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraph.html#withNode","title":"VisGraph.withNode","content":"VisGraph.withNode \nwithNode \n\n Adds a single node to a SigmaGraph.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraph.html#withNodes","title":"VisGraph.withNodes","content":"VisGraph.withNodes \nwithNodes \n\n Adds a sequence of nodes to a SigmaGraph.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraph.html#withNoverlap","title":"VisGraph.withNoverlap","content":"VisGraph.withNoverlap \nwithNoverlap \n\n Assigns a no-overlap layout to a SigmaGraph.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraph.html#withRandomLayout","title":"VisGraph.withRandomLayout","content":"VisGraph.withRandomLayout \nwithRandomLayout \n\n Assigns a random layout to a SigmaGraph.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraph.html#withRenderer","title":"VisGraph.withRenderer","content":"VisGraph.withRenderer \nwithRenderer \n\n Sets the renderer settings for the SigmaGraph.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraph.html#withSize","title":"VisGraph.withSize","content":"VisGraph.withSize \nwithSize \n\n Sets the size of the SigmaGraph canvas.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraphelement.html","title":"VisGraphElement","content":"VisGraphElement \n \nVisGraphElement.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nVisGraphElement.edge \nedge \nVisGraphElement.node \nnode \nVisGraphElement.withEdgeData \nwithEdgeData \nVisGraphElement.withNodeData \nwithNodeData","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraphelement.html#\u0060\u0060.ctor\u0060\u0060","title":"VisGraphElement.\u0060\u0060.ctor\u0060\u0060","content":"VisGraphElement.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraphelement.html#edge","title":"VisGraphElement.edge","content":"VisGraphElement.edge \nedge \n\n Initializes a new edge with the given source and target nodes.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraphelement.html#node","title":"VisGraphElement.node","content":"VisGraphElement.node \nnode \n\n Initializes a new node with the given key.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraphelement.html#withEdgeData","title":"VisGraphElement.withEdgeData","content":"VisGraphElement.withEdgeData \nwithEdgeData \n\n Sets additional data for an edge.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-visgraphelement.html#withNodeData","title":"VisGraphElement.withNodeData","content":"VisGraphElement.withNodeData \nwithNodeData \n\n Sets additional data for a node.\n ","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-interactive-formatters.html","title":"Formatters","content":"Formatters \n \nFormatters.toInteractiveHTML \ntoInteractiveHTML","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-interactive-formatters.html#toInteractiveHTML","title":"Formatters.toInteractiveHTML","content":"Formatters.toInteractiveHTML \ntoInteractiveHTML \nConverts a Cytoscape type to it\u0027s HTML representation to show in a notebook environment.","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-interactive-formatterkernelextension.html","title":"FormatterKernelExtension","content":"FormatterKernelExtension \n \nFormatterKernelExtension.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/reference/sigmagraph-net-interactive-formatterkernelextension.html#\u0060\u0060.ctor\u0060\u0060","title":"FormatterKernelExtension.\u0060\u0060.ctor\u0060\u0060","content":"FormatterKernelExtension.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"http://localhost:8901/2_Basic_Usage.html","title":"Basic Usage\n","content":"Basic Usage\nInstallation using NuGet\n//SigmaGraph.NET and SigmaGraph.NET.Interactive\n# \u0026quot;nuget: C:/Users/lukas/Documents/GitHub/Project/SigmaGraph.NET/pkg\u0026quot;\n#r \u0026quot;nuget: SigmaGraph.NET, 0.0.0-dev\u0026quot;\n#r \u0026quot;nuget: SigmaGraph.NET.Interactive, 0.0.0-dev\u0026quot;\n//Additional Librarys\n#r \u0026quot;nuget: DynamicObj, 2.0.0\u0026quot;\n#r \u0026quot;nuget: Newtonsoft.Json\u0026quot;\n#r \u0026quot;nuget: Giraffe.ViewEngine, 1.4.0\u0026quot;\n\n\nopen SigmaGraph.NET\nopen SigmaGraph.NET.Interactive\n\nopen System\nopen DynamicObj\nopen Newtonsoft.Json\nopen Giraffe.ViewEngine\n\nVisGraph.empty()\n|\u0026gt; VisGraph.withNode(Node.Init(\u0026quot;1\u0026quot;))\n\nCreating a simple Graph :\nThis code cell demonstrates the process of creating and configuring a graph. It begins by initializing a new, empty graph using VisGraph.empty(). Next, it defines two nodes with identifiers \u00221\u0022 and \u00222\u0022 through the Node.Init function. An edge is then created to connect these nodes, specified by Edge.Init(\u00221\u0022, \u00222\u0022). Finally, the code adds both the nodes and the edge to the graph using VisGraph.withNodes and VisGraph.withEdge, respectively. This results in a graph containing the defined nodes and the connecting edge.\n// Initiate a new Graph\nlet newGraph = VisGraph.empty()\n\n// Initiate new Nodes \nlet node1 = Node.Init(\u0026quot;1\u0026quot;)\nlet node2 = Node.Init(\u0026quot;2\u0026quot;)\n\n//Initiate new Edge similar to how you initiate new Nodes\nlet edge1 = Edge.Init(\u0026quot;1\u0026quot;,\u0026quot;2\u0026quot;)\n\n//Add Nodes and Edges to the Graph \nnewGraph\n|\u0026gt; VisGraph.withNodes([node1;node2])\n|\u0026gt; VisGraph.withEdge(edge1)\n\n\nCustomizing nodes and edges:\nBasic Customization\nThis code cell illustrates how to create and configure nodes and edges with display attributes in a graph. It begins by defining two nodes, styledNode1 and styledNode2, each with specific display properties such as size and label. The Node.Init function is used to initialize these nodes, where DisplayData.Init sets the display size and label for each node.\nAn edge, styledEdge, is then created to connect the two nodes, also with display properties specified by DisplayData.Init, which sets the edge size.\nFinally, an empty graph is initialized with VisGraph.empty(), and the previously defined nodes and edge are added to the graph using VisGraph.withNodes and VisGraph.withEdge, respectively. This results in a graph that includes nodes and an edge with customized display attributes.\n//create Nodes with DisplayData\nlet styledNode1 = Node.Init(key=\u0026quot;s1\u0026quot; , DisplayData = DisplayData.Init(Size = 10 , Label = \u0026quot;Node 1\u0026quot;))\nlet styledNode2 = Node.Init(key = \u0026quot;s2\u0026quot; , DisplayData = DisplayData.Init(Size = 10 , Label = \u0026quot;Node 2\u0026quot;))\n\n//create edges with DisplayData\nlet styledEdge = Edge.Init(\u0026quot;s1\u0026quot; , \u0026quot;s2\u0026quot; , DisplayData = DisplayData.Init(Size = 10))\n\nVisGraph.empty()\n|\u0026gt; VisGraph.withNodes([styledNode1 ; styledNode2])\n|\u0026gt; VisGraph.withEdge(styledEdge)\n\n\nColor options\nThis code snippet demonstrates the creation of nodes and an edge with specified colors in a graph. It starts by defining two nodes, redNode and greenNode, each initialized with a specific color and size using Node.Init and DisplayData.Init. The redNode is assigned a red color (#ff0000), and the greenNode is assigned a green color (#008000).\nAn edge, yellowEdge, is then created to connect these nodes, with a yellow color (#ffff00) and a specified size, using Edge.Init and DisplayData.Init.\nThe graph gets created by initializing an empty graph with VisGraph.empty(), and then adding the colored nodes and edge to the graph with VisGraph.withNodes and VisGraph.withEdge, respectively. This results in a graph where both nodes and the connecting edge have distinct colors.\nYou can adjust the colors of nodes and edges using html-color-codes.\n// Create colored Nodes\nlet redNode = Node.Init(\u0026quot;r\u0026quot; , DisplayData.Init(Size = 10 , Color = \u0026quot;#ff0000\u0026quot;))\nlet greenNode = Node.Init(\u0026quot;g\u0026quot; , DisplayData.Init(Size = 10 , Color = \u0026quot;#008000\u0026quot;))\n\n//Create colored Edge\nlet yellowEdge = Edge.Init(\u0026quot;r\u0026quot; , \u0026quot;g\u0026quot; , \u0026quot;y\u0026quot; , DisplayData.Init(Size = 10 , Color = \u0026quot;#ffff00\u0026quot;))\n\nVisGraph.empty()\n|\u0026gt; VisGraph.withNodes([redNode ; greenNode])\n|\u0026gt; VisGraph.withEdge(yellowEdge)\n\n\nVisualization\nTo view the graph, you can either use the SigmaGraph.NET.Interactive library or display the graph as an HTML file.\nThe code cell demonstrates how to create a graph and display it. First, an empty graph is initialized with VisGraph.empty(). The previously defined nodes (redNode and greenNode) and edge (yellowEdge) are added to the graph using VisGraph.withNodes and VisGraph.withEdge, respectively, creating exampleGraph.\nThe graph is then visualized with the VisGraph.show() function, which renders exampleGraph and allows for graphical inspection.\nlet exampleGraph =\n    VisGraph.empty()\n    |\u0026gt; VisGraph.withNodes([redNode ; greenNode])\n    |\u0026gt; VisGraph.withEdge(yellowEdge)\n\nexampleGraph\n|\u0026gt; VisGraph.show()\n\n","headings":["Basic Usage","Installation using NuGet","Creating a simple Graph :","Customizing nodes and edges:","Basic Customization","Color options","Visualization"],"type":"content"},{"uri":"http://localhost:8901/index.html","title":"Getting Started","content":"\nsigmaNET\nThe sigmaNET project aims to provide a rigorous and performant tool for Network Science.\nIt is aimed at anyone who works with Graphs/Networks and does not require a strong knowledge of F# to get started.\nGetting Started\nPrerequisites\nTo set up a dev environment, we recommend VSCode with the Ionide plugin\nYou will also need DotNet 6 installed.\nThe library is designed primarily for use in an fsharp scripting environment using .fsx files.\nBut it also works well in notebooks.\nThis video has a good walk through of setting your environment.\nContributing and copyright\nThe project is hosted on GitHub where you can report issues, fork\nthe project and submit pull requests. If you\u0027re adding a new public API, please also\nconsider adding samples that can be turned into a documentation. You might\nalso want to read the library design notes to understand how it works.\nThe library is available under the OSI-approved MIT license, which allows modification and\nredistribution for both commercial and non-commercial purposes. For more information see the\nLicense file in the GitHub repository.\n","headings":["sigmaNET","Getting Started","Prerequisites","Contributing and copyright"],"type":"content"},{"uri":"http://localhost:8901/3_Advanced_Usage.html","title":"Advanced Usage\n","content":"Advanced Usage\nInstalling the required Librarys\n//SigmaGraph.NET and SigmaGraph.NET.Interactive\n# \u0026quot;nuget: C:/Users/lukas/Documents/GitHub/Project/SigmaGraph.NET/pkg\u0026quot;\n#r \u0026quot;nuget: SigmaGraph.NET, 0.0.0-dev\u0026quot;\n#r \u0026quot;nuget: SigmaGraph.NET.Interactive, 0.0.0-dev\u0026quot;\n//Additional Librarys\n#r \u0026quot;nuget: DynamicObj, 2.0.0\u0026quot;\n#r \u0026quot;nuget: Newtonsoft.Json\u0026quot;\n#r \u0026quot;nuget: Giraffe.ViewEngine, 1.4.0\u0026quot;\n\n\nopen SigmaGraph.NET\nopen SigmaGraph.NET.Interactive\n\nopen System\nopen DynamicObj\nopen Newtonsoft.Json\nopen Giraffe.ViewEngine\n\nAdding multiple nodes at once\nThis code cell demonstrates how to create a graph with a sequence of nodes and edges. First, a sequence of nodes is generated, each initialized with a unique identifier and display attributes such as label and size. Similarly, a sequence of edges is created to connect specified pairs of nodes.\nAn empty graph is initialized with VisGraph.empty(). The sequences of nodes and edges are added to the graph using VisGraph.withNodes and VisGraph.withEdges, respectively. Additionally, a circular layout is applied to the graph using VisGraph.withCircularLayout to arrange the nodes in a circular fashion.\n//Create a Node-Sequence, in this case a list but you can also use other sequence types like arrays or just a sequence\nlet nodesToAdd = [1..10] |\u0026gt; List.map (fun x -\u0026gt; Node.Init(string x, DisplayData.Init(Label = string x, Size= 15)))\n\n// Creating an Edge Sequence\nlet edgesToAdd = [1,2; 2,5; 7,3; 1,4; 8,6; 4,1] |\u0026gt; List.map (fun (x,y) -\u0026gt; Edge.Init(string x,string y))\n\n// Add the nodesequence and  edgesequence to an empty graph \nVisGraph.empty()\n|\u0026gt; VisGraph.withNodes(nodesToAdd) // add the node sequence\n|\u0026gt; VisGraph.withEdges(edgesToAdd) // add the edge sequence\n|\u0026gt; VisGraph.withCircularLayout()  // choosing the desired Layout\n\n\nCreating complex Networks and using other Librarys together with SigmaGraph.NET\nThis code cell demonstrates how to create a graph using the Graphoscope and SigmaGraph.NET package and visualize it.\nFirst, the Graphoscope package is referenced and imported. Various parameters are defined, including a set of colors for node display and randomization settings. A random graph is then generated using the Bollobas-Riordan model with specified parameters.\nAn empty graph is initialized with VisGraph.empty(). Nodes are added to the graph, each node being assigned a random size, color, and label based on the random graph generated. Similarly, edges are added, each edge connecting nodes with a randomly determined size.\nThe result is exampleVisGRaph, a graph populated with randomly generated nodes and edges, ready for visualization.\n// Reference the Graphoscope package\n#r \u0026quot;nuget: Graphoscope, 0.4.0\u0026quot;\nopen Graphoscope\nopen Graphoscope.RandomModels\n\n// Define colors for nodes\nlet colors = [|\u0026quot;#F2FFE9\u0026quot;;\u0026quot;#A6CF98\u0026quot;;\u0026quot;#557C55\u0026quot;;\u0026quot;#FA7070\u0026quot;|]\n\n// Initialize parameters for the graph model\nlet N = 50\nlet rnd = new Random()\n\n// Create a random graph using the BollobasRiordan model\nlet myBollobasRiordan = RandomModels.BollobasRiordan.initDirectedFGraph N 0.5 0.1 0.4 0.6 0.4 FGraph.empty\n\n// Add nodes\nlet exampleVisGRaph =\n    VisGraph.empty()\n    |\u0026gt; VisGraph.withNodes[\n        for node in myBollobasRiordan do                                      \n            yield Node.Init(key=string node.Key, DisplayData=DisplayData.Init(Size=rnd.Next(1, 18), Color=colors.[rnd.Next(0, 4)], Label=string node.Key))\n    ]\n//Add edges\n    |\u0026gt; VisGraph.withEdges[\n        for node in myBollobasRiordan do\n            let pred, t, _ = node.Value\n            for kv in pred do\n                yield Edge.Init(source=string kv.Key, target=string t, DisplayData=DisplayData.Init(Size=rnd.Next(1, 3)))\n    ]\nexampleVisGRaph\n\n\nLayouts\nRandom Layout\nThis code applies a random layout to the exampleVisGRaph, arranging the nodes in a random configuration for visualization.\nexampleVisGRaph\n|\u0026gt; VisGraph.withRandomLayout()\n\n\nCircular Layout\nThis code applies a circular layout to the exampleVisGRaph, arranging the nodes in a circular pattern for visualization.\nexampleVisGRaph\n|\u0026gt; VisGraph.withCircularLayout()\n\n\nRender settings\nThere are many differend render settings you can choose from. You can use this to define a set of render settings before visualizing your graphs to have a homogenous outcome if you are visuallizing multiple graphs. More on render settings can be found in the section \u0022Render settings\u0022.\nThis code configures the exampleVisGRaph with a custom renderer, setting the label size to 20 and the label color to #FA7070 for visualization.\nexampleVisGRaph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(LabelSize = 20, LabelColor=Render.ColorOrReference.Init(Color=\u0026quot;#FA7070\u0026quot;)))\n\n\nHover selector\nThe hoverselector is a powerfull tool that allows you to keep an overview over big graphs as it lets you hover over each node and see the edges it is part of.\nThis code adds a hover selector to the exampleVisGRaph, enabling interactive hover effects for nodes and edges during visualization.\n//Adding the HoverSelector option to our graph\nexampleVisGRaph\n|\u0026gt; VisGraph.withHoverSelector()\n\n\n","headings":["Advanced Usage","Installing the required Librarys","Adding multiple nodes at once","Creating complex Networks and using other Librarys together with SigmaGraph.NET","Layouts","Random Layout","Circular Layout","Render settings","Hover selector"],"type":"content"},{"uri":"http://localhost:8901/4_Render_Settings.html","title":"Render Settings\n","content":"Render Settings\nThe render settings in the graph visualization library allow for customizing various aspects of graph rendering, including node appearance, edge appearance, label rendering, and event handling. Below are descriptions and examples for each setting, grouped by functionality.\n//SigmaGraph.NET and SigmaGraph.NET.Interactive\n# \u0026quot;nuget: C:/Users/lukas/Documents/GitHub/Project/SigmaGraph.NET/pkg\u0026quot;\n#r \u0026quot;nuget: SigmaGraph.NET, 0.0.0-dev\u0026quot;\n#r \u0026quot;nuget: SigmaGraph.NET.Interactive, 0.0.0-dev\u0026quot;\n//Additional Librarys\n#r \u0026quot;nuget: DynamicObj, 2.0.0\u0026quot;\n#r \u0026quot;nuget: Newtonsoft.Json\u0026quot;\n#r \u0026quot;nuget: Giraffe.ViewEngine, 1.4.0\u0026quot;\n\n\nopen SigmaGraph.NET\nopen SigmaGraph.NET.Interactive\n\nopen System\nopen DynamicObj\nopen Newtonsoft.Json\nopen Giraffe.ViewEngine\n\nIn this example, the nodes [1; 2; 3; 4; 5] are created and labeled with their respective numbers. The edges connect specific node pairs, such as (1, 3) and (2, 4). The graph is then constructed by adding the nodes and edges to an empty graph.\nlet renderExampleGraph = \n    let nodes = [1;2;3;4;5] |\u0026gt; List.map (fun x -\u0026gt; Node.Init(string x,DisplayData.Init(Label = string x, Size= 15))) //Initiation Nodes\n    let edges = [1,3;1,5;3,5;2,4] |\u0026gt; List.map (fun (x,y) -\u0026gt; Edge.Init(string x,string y, DisplayData=DisplayData.Init(Label = String.concat \u0026quot;-\u0026quot; [string x;string y]))) //Initiating Edges\n    VisGraph.empty() //Creating a new instance of VisGraph\n    |\u0026gt; VisGraph. withNodes(nodes) //adding Nodes to the empty Visgraph\n    |\u0026gt; VisGraph.withEdges(edges) // Adding Edges to the Graph\nrenderExampleGraph\n\nNodes\nThese settings affect the rendering of nodes in the graph.\n\u0027DefaultNodeColor\u0027\nSets the default color of nodes.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(DefaultNodeColor = \u0026quot;#FF5733\u0026quot;))\n\n\u0027DefaultNodeType\u0027\nDefines the default type of nodes (e.g., -Circle-)\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(DefaultNodeType = StyleParam.NodeType.Circle))\n\n\u0027NodeReducer\u0027\nApplies a custom node reducer function for advanced node rendering.\n// Node reducer wollt ich noch ein issue auf github machen\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(NodeReducer = \u0026quot;customNodeReducer\u0026quot;))\n\nEdges\nThese settings control the rendering of edges between nodes.\n\u0027DefaultEdgeColor\u0027\nSets the default color of edges.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(DefaultEdgeColor = \u0026quot;#33FF57\u0026quot;))\n\n\u0027DefaultEdgeType\u0027\nSpecifies the default type of edges (e.g., Line, Arrow, etc.).\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(DefaultEdgeType = StyleParam.EdgeType.Arrow))\n\n\u0027EdgeReducer\u0027\nApplies a custom edge reducer function for advanced edge rendering.\n//hier wahrscheinlich auch ein issue machen weil ka ob der reducer funktioniert\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(EdgeReducer = \u0026quot;customEdgeReducer\u0026quot;))\n\nLabels\nThese settings control the appearance and behavior of labels associated with nodes and edges.\n\u0027RenderLabels\u0027\nDetermines whether node labels should be rendered.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(RenderLabels = true))\n\n\u0027RenderEdgeLabels\u0027\nDetermines whether edge labels should be rendered.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(RenderEdgeLabels = true))\n\n\u0027LabelFont\u0027\nSpecifies the font used for node labels.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(LabelFont = \u0026quot;Arial\u0026quot;))\n\n\u0027LabelSize\u0027\nSets the font size for node labels.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(LabelSize = 30))\n\n\u0027LabelWeight\u0027\nDefines the font weight (e.g., Normal, Bold) for node labels.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(LabelWeight = \u0026quot;Bold\u0026quot;))\n\n\u0027LabelColor\u0027\nSets the color of node labels. You can use either a specific color or a reference.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(LabelColor = Render.ColorOrReference.Init(\u0026quot;#ffd700\u0026quot;)))\n\n\u0027EdgeLabelFont\u0027\nSpecifies the font used for edge labels.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(EdgeLabelFont = \u0026quot;Courier New\u0026quot;))\n\n\u0027EdgeLabelSize\u0027\nSets the font size for edge labels.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(EdgeLabelSize = 30, RenderEdgeLabels = true))\n\n\u0027EdgeLabelWeight\u0027\nDefines the font weight for edge labels.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(EdgeLabelWeight = \u0026quot;Normal\u0026quot;))\n\n\u0027EdgeLabelColor\u0027\nSets the color of edge labels.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(EdgeLabelColor = Render.ColorOrReference.Init(\u0026quot;#008b8b\u0026quot;), RenderEdgeLabels = true))\n\n\u0027LabelDensity\u0027\nControls the density of label rendering, impacting how many labels appear based on zoom and space.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(LabelDensity = 80))\n\n\u0027LabelGridCellSize\u0027\nSets the size of the grid cells used for label placement, which can help avoid label overlaps.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(LabelGridCellSize = 10))\n\n\u0027LabelRenderedSizeThreshold\u0027\nDefines the minimum size threshold at which labels are rendered.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(LabelRenderedSizeThreshold = 5))\n\nInteractivity\nThese settings control the interactive behavior of the graph, including events triggered by user actions.\n\u0027EnableEdgeClickEvents\u0027\nEnables or disables click events on edges.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(EnableEdgeClickEvents = true))\n\n\u0027EnableEdgeWheelEvents\u0027\nEnables or disables wheel events (e.g., scrolling) on edges.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(EnableEdgeWheelEvents = true))\n\n\u0027EnableEdgeHoverEvents\u0027\nEnables or disables hover events on edges.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(EnableEdgeHoverEvents = true))\n\nPerformance and Rendering\nThese settings affect the performance and overall rendering behavior of the graph.\n\u0027HideEdgesOnMove\u0027\nTemporarily hides edges when moving the graph for performance improvements.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(HideEdgesOnMove = true))\n\n\u0027HideLabelsOnMove\u0027\nTemporarily hides labels when moving the graph to improve performance.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(HideLabelsOnMove = true))\n\n\u0027ZIndex\u0027\nEnables or disables the usage of Z-index to control layering of nodes and edges\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(ZIndex = true))\n\n\u0027StagePadding\u0027\nSets the padding around the rendering stage (i.e., the area where the graph is rendered).\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(StagePadding = 20))\n\nCamera\nThese settings control the camera\u0027s behavior, including zoom limits.\n\u0027MinCameraRatio\u0027\nDefines the minimum zoom level for the camera.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(MinCameraRatio = 1))\n\n\u0027MaxCameraRatio\u0027\nDefines the maximum zoom level for the camera.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(MaxCameraRatio = 2))\n\nCustom Renderers\nThese settings allow for the use of custom renderers for different graph components.\n\u0027LabelRenderer\u0027\nSpecifies a custom renderer for node labels.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(LabelRenderer = \u0026quot;customLabelRenderer\u0026quot;))\n\n\u0027HoverRenderer\u0027\nSpecifies a custom renderer for hover effects.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(HoverRenderer = \u0026quot;customHoverRenderer\u0026quot;))\n\n\u0027EdgeLabelRenderer\u0027\nSpecifies a custom renderer for edge labels.\nrenderExampleGraph\n|\u0026gt; VisGraph.withRenderer(Render.Settings.Init(EdgeLabelRenderer = \u0026quot;customEdgeLabelRenderer\u0026quot;))\n\n","headings":["Render Settings","Nodes","\u0027DefaultNodeColor\u0027","\u0027DefaultNodeType\u0027","\u0027NodeReducer\u0027","Edges","\u0027DefaultEdgeColor\u0027","\u0027DefaultEdgeType\u0027","\u0027EdgeReducer\u0027","Labels","\u0027RenderLabels\u0027","\u0027RenderEdgeLabels\u0027","\u0027LabelFont\u0027","\u0027LabelSize\u0027","\u0027LabelWeight\u0027","\u0027LabelColor\u0027","\u0027EdgeLabelFont\u0027","\u0027EdgeLabelSize\u0027","\u0027EdgeLabelWeight\u0027","\u0027EdgeLabelColor\u0027","\u0027LabelDensity\u0027","\u0027LabelGridCellSize\u0027","\u0027LabelRenderedSizeThreshold\u0027","Interactivity","\u0027EnableEdgeClickEvents\u0027","\u0027EnableEdgeWheelEvents\u0027","\u0027EnableEdgeHoverEvents\u0027","Performance and Rendering","\u0027HideEdgesOnMove\u0027","\u0027HideLabelsOnMove\u0027","\u0027ZIndex\u0027","\u0027StagePadding\u0027","Camera","\u0027MinCameraRatio\u0027","\u0027MaxCameraRatio\u0027","Custom Renderers","\u0027LabelRenderer\u0027","\u0027HoverRenderer\u0027","\u0027EdgeLabelRenderer\u0027"],"type":"content"},{"uri":"http://localhost:8901/1_Introduction.html","title":"Introduction\n","content":"Introduction\nLibrary Name\nSigmaGraph.NET\nSigmaGraph.NET.Interactive\nDescription\nSigmaGraph.NET is a powerful and easy-to-use library for visualizing graphs and networks that provides intuitive methods to create, customize, and display   various types of graphs, making it suitable for both beginners and advanced users. Additionally, SigmaGraph.NET.Interactive offers interactive visualization options, allowing users to explore and manipulate graphs in real-time for deeper insights and analysis.\nGraphs\nA graph is a mathematical structure used to model pairwise relationships between objects. It consists of a set of nodes (also called vertices) and a set of edges (also called links or connections) that connect pairs of nodes. Graphs are widely used in various fields such as computer science, biology, social sciences, and network science to represent and analyze networks.\nNodes (Vertices)\nNodes are the individual entities or points in a graph. Each node can represent a different object, such as a person in a social network, a gene in a biological network, or a computer in a communication network. Nodes are typically depicted as dots or circles in a graphical representation.\nEdges (Links)\nEdges are the connections between nodes in a graph. Each edge represents a relationship or interaction between two nodes. Edges can be directed or undirected:\n\nUndirected Edges: Represent bidirectional relationships where the connection does not have a specific direction (e.g., friendship in a social network).\nDirected Edges: Represent unidirectional relationships where the connection has a specific direction (e.g., a follower relationship in Twitter).\nWeighted Edges: Represent relationships where the connection carries a value or weight, indicating the strength or capacity of the link (e.g., the cost of traveling between two cities on a map).\nUnweighted Edges: Represent relationships where the connection does not have a specific value or weight, treating all links as equal in terms of their significance (e.g., a simple link between nodes in a network graph).\n\nThese basic concepts form the foundation for understanding and visualizing graphs.\nFeatures:\n\nSimple and intuitive API\nCustomizable node and edge attributes\nInteractive visualization options\n\nInstallation\nUsing nuget\n//SigmaGraph.NET and SigmaGraph.NET.Interactive\n# \u0026quot;nuget: C:/Users/lukas/Documents/GitHub/Project/SigmaGraph.NET/pkg\u0026quot;\n#r \u0026quot;nuget: SigmaGraph.NET, 0.0.0-dev\u0026quot;\n#r \u0026quot;nuget: SigmaGraph.NET.Interactive, 0.0.0-dev\u0026quot;\n\nopen SigmaGraph.NET\nopen SigmaGraph.NET.Interactive\n\n","headings":["Introduction","Library Name","Description","Graphs","Nodes (Vertices)","Edges (Links)","Features:","Installation"],"type":"content"}]